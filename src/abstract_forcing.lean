/- The formalism of forcing, following Justin Moore's notes -/

import order.bounded_lattice tactic order.complete_boolean_algebra set_theory.zfc .to_mathlib

open lattice

universe u

@[class]def forcing_notion (Œ± : Type u) : Type u := order_top Œ±

-- @[instance]def has_top_forcing_notion (Œ± : Type u) [H : forcing_notion Œ±] : has_top Œ± := sorry

instance partial_order_of_forcing_notion (Œ± : Type u) [H : forcing_notion Œ±] : partial_order Œ± :=
{ le := H.le,
  lt := H.lt,
  le_refl := H.le_refl,
  le_trans := H.le_trans,
  lt_iff_le_not_le := H.lt_iff_le_not_le,
  le_antisymm := H.le_antisymm }

def order_top.mk {Œ± : Type u} [H‚ÇÅ : partial_order Œ±] [H‚ÇÇ : has_top Œ±] (H : ‚àÄ a : Œ±, a ‚â§ ‚ä§) : order_top Œ± :=
{ top := ‚ä§,
  le := (‚â§),
  lt := (<),
  le_refl := H‚ÇÅ.le_refl,
  le_trans := H‚ÇÅ.le_trans,
  lt_iff_le_not_le := H‚ÇÅ.lt_iff_le_not_le,
  le_antisymm := H‚ÇÅ.le_antisymm,
  le_top := H }

@[instance]example {Œ± : Type u} : forcing_notion (set Œ±) :=
order_top.mk (Œª _, le_top)

/- A pfilter is an order-theoretic filter on the partial order Œ±  -/
structure pfilter (Œ± : Type u) [partial_order Œ±] : Type u :=
(X : set Œ±)
(nonempty : X ‚â† ‚àÖ)
(upward_closed : ‚àÄ (p q : Œ±) (H_le : p ‚â§ q) (H_mem : p ‚àà X), q ‚àà X)
(downward_directed : ‚àÄ (p q ‚àà X), ‚àÉ r ‚àà X, r ‚â§ p ‚àß r ‚â§ q)

inductive Name (P : Type u) [forcing_notion P] : Type (u+1)
| mk (Œ± : Type u) (A : Œ± ‚Üí Name) (B : Œ± ‚Üí P) : Name

postfix `-name`:100 := Name

instance : partial_order punit :=
{ le := Œª _ _, true,
  lt := Œª _ _, false,
  le_refl := by simp,
  le_trans := by simp,
  lt_iff_le_not_le := by simp,
  le_antisymm := by finish }

instance : has_top punit := ‚ü®punit.star‚ü©

instance : forcing_notion punit := order_top.mk (by finish)

instance forcing_notion_complete_boolean_algebra {Œ± : Type u} [complete_boolean_algebra Œ±] : forcing_notion Œ± := order_top.mk (by finish)

--TODO(jesse) rewrite in terms of pSet.rec and Name.rec
def pSet_equiv_trivial_name : pSet.{u} ‚âÉ (punit-name : Type (u+1)) :=
{ to_fun := Œª u,
  begin
    induction u with Œ± A ih,
    from ‚ü®Œ±, ih, Œª _, punit.star‚ü©
  end,
  inv_fun := Œª v,
  begin
    induction v with Œ± A B ih,
    from ‚ü®Œ±, ih‚ü©
  end,
  left_inv :=
    Œª x, by induction x; finish,
  right_inv :=
    Œª y, by induction y; finish }

-- def Pcheck {P} [forcing_notion P] : pSet.{u} ‚Üí (P-name : Type (u+1))
-- | ‚ü®Œ±, A‚ü© := ‚ü®Œ±, Œª a, Pcheck (A a), Œª _, ‚ä§‚ü©


namespace pfilter

-- note: this will require a smallness argument, since we're going to be reconstructing a type in the ground model

/-
from Moore's "The method of forcing":

If G is any filter and ·∫ã is any Q-name, define
·∫ã(G) recursively by ·∫ã(G) := { ·∫è(G) : ‚àÉp ‚àà G (( ·∫è, p) ‚àà ·∫ã)}

x ‚Ü¶ ·∫ã is a map (Name Œ±).{u} ‚Üí Type u, parametrized by a pfilter (G : pfilter Œ±)

However, what does it mean for a filter in this case to be generic?
-/
def eval {P : Type u} [forcing_notion P] (ùí¢ : pfilter P) : P-name ‚Üí Type u
| ‚ü®Œ±, A, B‚ü© := Œ£ p : {a : Œ± // B a ‚àà ùí¢.X}, eval (A p.1)

def eval_image {P : Type u} [forcing_notion P] (ùí¢ : pfilter P): Type (u + 1) :=
{Œ± // ‚àÉ x, Œ± = eval ùí¢ x} -- this should be our new model of set theory

--TODO 6.8. 6.9, and 6.10 from Moore's notes

-- def foo {P : Type u} [forcing_notion P] (ùí¢ : pfilter P)  : pSet.{u} ‚Üí (eval_image.{u} ùí¢) := Œª x, ‚ü®eval ùí¢ (Pcheck x), ‚ü®_, rfl‚ü©‚ü©

-- now foo is the canonical map from pSet to eval_image
-- need to check that (foo x) is "equivalent" to x again in some way

end pfilter
